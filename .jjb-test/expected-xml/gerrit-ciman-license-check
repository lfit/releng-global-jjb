<?xml version="1.0" encoding="utf-8"?>
<project>
  <actions/>
  <description>&lt;!-- Managed by Jenkins Job Builder --&gt;</description>
  <keepDependencies>false</keepDependencies>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <concurrentBuild>true</concurrentBuild>
  <canRoam>true</canRoam>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>7</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>0</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>PROJECT</name>
          <description>Parameter to identify a Gerrit project. This is typically the
project repo path as exists in Gerrit.
For example: ofextensions/circuitsw
</description>
          <defaultValue>releng/ciman</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>STREAM</name>
          <description>Stream is often set to the same name as 'branch' but can
sometimes be used as a name representing a project's release code
name.
</description>
          <defaultValue>master</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GERRIT_PROJECT</name>
          <description>Parameter to identify Gerrit project. This is typically the
project repo path as exists in Gerrit.
For example: ofextensions/circuitsw

Note that Gerrit will override this parameter automatically if a
job is triggered by Gerrit.
</description>
          <defaultValue>releng/ciman</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GERRIT_BRANCH</name>
          <description>Parameter to identify a Gerrit branch.

Note that Gerrit will override this parameter automatically if a
job is triggered by Gerrit.
</description>
          <defaultValue>master</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GERRIT_REFSPEC</name>
          <description>Parameter to identify a refspec when pulling from Gerrit.

Note that Gerrit will override this parameter automatically if a
job is triggered by Gerrit.
</description>
          <defaultValue>refs/heads/master</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>LFTOOLS_VERSION</name>
          <description>Version of lftools to install. Can be a specific version like
'0.6.0' or a PEP-440 definition.
https://www.python.org/dev/peps/pep-0440/
For example '&lt;1.0.0' or '&gt;=1.0.0,&lt;2.0.0'.
</description>
          <defaultValue>&lt;1.0.0</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>LICENSE_EXCLUDE_PATHS</name>
          <description>Comma-separated list of paths to exclude from the license checker.
The paths used here will be matched using a contains rule so it
is best to be as precise with the path as possible. For example a
path of '/src/generated/' will be searched as
'**/src/generated/**'.

Example org/opendaylight/yang/gen,protobuff/messages
</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <name>origin</name>
        <refspec>$GERRIT_REFSPEC</refspec>
        <url>$GIT_URL/$GERRIT_PROJECT</url>
        <credentialsId>test-credential</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>refs/heads/$GERRIT_BRANCH</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <excludedUsers/>
    <buildChooser class="com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTriggerBuildChooser"/>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <authorOrCommitter>false</authorOrCommitter>
    <wipeOutWorkspace>true</wipeOutWorkspace>
    <pruneBranches>false</pruneBranches>
    <remotePoll>false</remotePoll>
    <gitTool>Default</gitTool>
    <submoduleCfg class="list"/>
    <relativeTargetDir/>
    <reference/>
    <gitConfigName/>
    <gitConfigEmail/>
    <skipTag>true</skipTag>
    <scmName/>
    <useShallowClone>false</useShallowClone>
    <ignoreNotifyCommit>false</ignoreNotifyCommit>
    <extensions>
      <hudson.plugins.git.extensions.impl.SubmoduleOption>
        <disableSubmodules>false</disableSubmodules>
        <recursiveSubmodules>false</recursiveSubmodules>
        <trackingSubmodules>false</trackingSubmodules>
        <reference/>
        <timeout>10</timeout>
      </hudson.plugins.git.extensions.impl.SubmoduleOption>
      <hudson.plugins.git.extensions.impl.WipeWorkspace/>
    </extensions>
  </scm>
  <triggers class="vector">
    <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger>
      <spec/>
      <gerritProjects>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
          <compareType>ANT</compareType>
          <pattern>**</pattern>
          <branches>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>ANT</compareType>
              <pattern>**</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
          </branches>
          <disableStrictForbiddenFileVerification>false</disableStrictForbiddenFileVerification>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
      </gerritProjects>
      <skipVote>
        <onSuccessful>false</onSuccessful>
        <onFailed>false</onFailed>
        <onUnstable>false</onUnstable>
        <onNotBuilt>false</onNotBuilt>
      </skipVote>
      <silentMode>false</silentMode>
      <silentStartMode>false</silentStartMode>
      <escapeQuotes>true</escapeQuotes>
      <noNameAndEmailParameters>false</noNameAndEmailParameters>
      <readableMessage>false</readableMessage>
      <dependencyJobsNames/>
      <notificationLevel/>
      <dynamicTriggerConfiguration>False</dynamicTriggerConfiguration>
      <triggerConfigURL/>
      <allowTriggeringUnreviewedPatches>false</allowTriggeringUnreviewedPatches>
      <triggerOnEvents>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginPatchsetCreatedEvent>
          <excludeDrafts>false</excludeDrafts>
          <excludeTrivialRebase>false</excludeTrivialRebase>
          <excludeNoCodeChange>false</excludeNoCodeChange>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginPatchsetCreatedEvent>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginDraftPublishedEvent/>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginCommentAddedContainsEvent>
          <commentAddedCommentContains>recheck$</commentAddedCommentContains>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginCommentAddedContainsEvent>
      </triggerOnEvents>
      <buildStartMessage/>
      <buildFailureMessage/>
      <buildSuccessfulMessage/>
      <buildUnstableMessage/>
      <buildNotBuiltMessage/>
      <buildUnsuccessfulFilepath/>
      <customUrl/>
      <serverName>test-server</serverName>
    </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger>
  </triggers>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
# SPDX-License-Identifier: EPL-1.0
##############################################################################
# Copyright (c) 2017 The Linux Foundation and others.
#
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
##############################################################################
echo &quot;---&gt; license-check.sh&quot;

# Ensure we fail the job if any steps fail.
set -eu -o pipefail

if hash lhc 2&gt;/dev/null; then
    echo &quot;License Header Checker is installed.&quot;
    lhc --version
else
    echo &quot;License Header Checker is not installed. Installing...&quot;
    mkdir &quot;$WORKSPACE/bin&quot;
    # TODO: Update this once we have a more permanent location for the project.
    wget -nv -O &quot;$WORKSPACE/bin/lhc&quot; https://github.com/zxiiro/license-header-checker/releases/download/v0.1.0/lhc
    chmod +x &quot;$WORKSPACE/bin/lhc&quot;
    export PATH=&quot;$WORKSPACE/bin:$PATH&quot;
    lhc --version
fi

lhc --license Apache-2.0,EPL-1.0,MIT \
    --exclude &quot;$LICENSE_EXCLUDE_PATHS&quot; \
    '*.go' \
    '*.java' \
    '*.py' \
    '*.sh'
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <com.michelin.cio.hudson.plugins.maskpasswords.MaskPasswordsBuildWrapper/>
    <hudson.plugins.build__timeout.BuildTimeoutWrapper>
      <timeoutMinutes>15</timeoutMinutes>
      <timeoutEnvVar>BUILD_TIMEOUT</timeoutEnvVar>
      <failBuild>true</failBuild>
      <writingDescription>false</writingDescription>
      <timeoutPercentage>0</timeoutPercentage>
      <timeoutMinutesElasticDefault>3</timeoutMinutesElasticDefault>
      <timeoutType>absolute</timeoutType>
    </hudson.plugins.build__timeout.BuildTimeoutWrapper>
    <hudson.plugins.timestamper.TimestamperBuildWrapper/>
    <com.cloudbees.jenkins.plugins.sshagent.SSHAgentBuildWrapper>
      <user>test-credential</user>
    </com.cloudbees.jenkins.plugins.sshagent.SSHAgentBuildWrapper>
    <jenkins.plugins.openstack.compute.JCloudsOneOffSlave/>
  </buildWrappers>
</project>
